
import React, { useState } from "react";
import { 
  ChevronDown, 
  ChevronUp, 
  Filter, 
  MoreHorizontal, 
  Search, 
  Shield 
} from "lucide-react";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { 
  DropdownMenu, 
  DropdownMenuContent, 
  DropdownMenuItem, 
  DropdownMenuTrigger 
} from "@/components/ui/dropdown-menu";
import { cn } from "@/lib/utils";
import { 
  Vulnerability, 
  SeverityLevel 
} from "@/lib/types";
import { getSeverityColor, getStatusColor } from "@/lib/mock-data";
import { Badge } from "@/components/ui/badge";
import { 
  Select, 
  SelectContent, 
  SelectItem, 
  SelectTrigger, 
  SelectValue 
} from "@/components/ui/select";

interface VulnerabilityTableProps {
  vulnerabilities: Vulnerability[];
}

export function VulnerabilityTable({ vulnerabilities }: VulnerabilityTableProps) {
  const [searchQuery, setSearchQuery] = useState("");
  const [severityFilter, setSeverityFilter] = useState<SeverityLevel | "all">("all");
  const [statusFilter, setStatusFilter] = useState<string>("all");
  const [sortBy, setSortBy] = useState<string>("severity");
  const [sortOrder, setSortOrder] = useState<"asc" | "desc">("desc");

  const handleSort = (column: string) => {
    if (sortBy === column) {
      setSortOrder(sortOrder === "asc" ? "desc" : "asc");
    } else {
      setSortBy(column);
      setSortOrder("desc");
    }
  };

  const filteredVulnerabilities = vulnerabilities
    .filter(vuln => {
      const matchesSearch = 
        vuln.title.toLowerCase().includes(searchQuery.toLowerCase()) ||
        (vuln.cveId?.toLowerCase().includes(searchQuery.toLowerCase()) || false) ||
        vuln.affected_package.toLowerCase().includes(searchQuery.toLowerCase());
        
      const matchesSeverity = severityFilter === "all" || vuln.severity === severityFilter;
      const matchesStatus = statusFilter === "all" || vuln.status === statusFilter;
      
      return matchesSearch && matchesSeverity && matchesStatus;
    })
    .sort((a, b) => {
      const getSortValue = (vuln: Vulnerability, field: string) => {
        switch (field) {
          case "severity":
            const severityMap: Record<SeverityLevel, number> = {
              "critical": 5,
              "high": 4,
              "medium": 3,
              "low": 2,
              "info": 1
            };
            return severityMap[vuln.severity] || 0;
          case "date":
            return new Date(vuln.discovered_date).getTime();
          case "title":
            return vuln.title;
          case "package":
            return vuln.affected_package;
          default:
            return "";
        }
      };

      const aValue = getSortValue(a, sortBy);
      const bValue = getSortValue(b, sortBy);
      
      if (typeof aValue === "number" && typeof bValue === "number") {
        return sortOrder === "asc" ? aValue - bValue : bValue - aValue;
      }
      
      if (typeof aValue === "string" && typeof bValue === "string") {
        return sortOrder === "asc" 
          ? aValue.localeCompare(bValue) 
          : bValue.localeCompare(aValue);
      }
      
      return 0;
    });

  const getSortIcon = (column: string) => {
    if (sortBy !== column) return null;
    return sortOrder === "asc" ? <ChevronUp className="h-4 w-4" /> : <ChevronDown className="h-4 w-4" />;
  };

  return (
    <div className="space-y-4">
      <div className="flex flex-col md:flex-row gap-4 items-start md:items-center justify-between">
        <div className="relative w-full md:w-96">
          <Search className="absolute left-2 top-2.5 h-4 w-4 text-muted-foreground" />
          <Input
            placeholder="Search vulnerabilities..."
            value={searchQuery}
            onChange={(e) => setSearchQuery(e.target.value)}
            className="pl-8"
          />
        </div>
        
        <div className="flex gap-2 w-full md:w-auto flex-wrap md:flex-nowrap">
          <div className="w-full md:w-auto">
            <Select
              value={severityFilter}
              onValueChange={(value) => setSeverityFilter(value as SeverityLevel | "all")}
            >
              <SelectTrigger className="w-full md:w-[150px]">
                <SelectValue placeholder="Severity" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="all">All Severities</SelectItem>
                <SelectItem value="critical">Critical</SelectItem>
                <SelectItem value="high">High</SelectItem>
                <SelectItem value="medium">Medium</SelectItem>
                <SelectItem value="low">Low</SelectItem>
                <SelectItem value="info">Info</SelectItem>
              </SelectContent>
            </Select>
          </div>
          
          <div className="w-full md:w-auto">
            <Select
              value={statusFilter}
              onValueChange={setStatusFilter}
            >
              <SelectTrigger className="w-full md:w-[150px]">
                <SelectValue placeholder="Status" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="all">All Statuses</SelectItem>
                <SelectItem value="open">Open</SelectItem>
                <SelectItem value="fixed">Fixed</SelectItem>
                <SelectItem value="in_progress">In Progress</SelectItem>
                <SelectItem value="false_positive">False Positive</SelectItem>
              </SelectContent>
            </Select>
          </div>
          
          <Button variant="outline" size="icon">
            <Filter className="h-4 w-4" />
          </Button>
        </div>
      </div>
      
      <div className="rounded-md border overflow-hidden">
        <div className="overflow-x-auto">
          <table className="w-full">
            <thead className="bg-card">
              <tr className="text-xs border-b">
                <th 
                  className="px-4 py-3 text-left font-medium cursor-pointer hover:bg-secondary/30 transition-colors"
                  onClick={() => handleSort("severity")}
                >
                  <div className="flex items-center">
                    <Shield className="h-4 w-4 mr-1" />
                    Severity
                    {getSortIcon("severity")}
                  </div>
                </th>
                <th 
                  className="px-4 py-3 text-left font-medium cursor-pointer hover:bg-secondary/30 transition-colors"
                  onClick={() => handleSort("title")}
                >
                  <div className="flex items-center">
                    Title
                    {getSortIcon("title")}
                  </div>
                </th>
                <th 
                  className="px-4 py-3 text-left font-medium cursor-pointer hover:bg-secondary/30 transition-colors"
                  onClick={() => handleSort("package")}
                >
                  <div className="flex items-center">
                    Package
                    {getSortIcon("package")}
                  </div>
                </th>
                <th className="px-4 py-3 text-left font-medium">Status</th>
                <th 
                  className="px-4 py-3 text-left font-medium cursor-pointer hover:bg-secondary/30 transition-colors"
                  onClick={() => handleSort("date")}
                >
                  <div className="flex items-center">
                    Discovered
                    {getSortIcon("date")}
                  </div>
                </th>
                <th className="px-4 py-3 text-right font-medium">Actions</th>
              </tr>
            </thead>
            <tbody>
              {filteredVulnerabilities.length > 0 ? (
                filteredVulnerabilities.map((vuln) => (
                  <tr 
                    key={vuln.id} 
                    className="border-b bg-card/40 hover:bg-card/80 transition-colors"
                  >
                    <td className="px-4 py-3 text-sm">
                      <Badge 
                        variant="outline" 
                        className={cn("font-medium", getSeverityColor(vuln.severity))}
                      >
                        {vuln.severity.charAt(0).toUpperCase() + vuln.severity.slice(1)}
                      </Badge>
                    </td>
                    <td className="px-4 py-3 text-sm font-medium">
                      <div>{vuln.title}</div>
                      <div className="text-xs text-muted-foreground">{vuln.cveId}</div>
                    </td>
                    <td className="px-4 py-3 text-sm">
                      <div>{vuln.affected_package}</div>
                      <div className="text-xs text-muted-foreground">{vuln.affected_versions}</div>
                    </td>
                    <td className="px-4 py-3 text-sm">
                      <Badge className={getStatusColor(vuln.status)}>
                        {vuln.status === "in_progress" ? "In Progress" : 
                          vuln.status === "false_positive" ? "False Positive" : 
                          vuln.status.charAt(0).toUpperCase() + vuln.status.slice(1)}
                      </Badge>
                    </td>
                    <td className="px-4 py-3 text-sm text-muted-foreground">
                      {new Date(vuln.discovered_date).toLocaleDateString()}
                    </td>
                    <td className="px-4 py-3 text-sm text-right">
                      <DropdownMenu>
                        <DropdownMenuTrigger asChild>
                          <Button variant="ghost" size="icon">
                            <MoreHorizontal className="h-4 w-4" />
                          </Button>
                        </DropdownMenuTrigger>
                        <DropdownMenuContent align="end">
                          <DropdownMenuItem>View Details</DropdownMenuItem>
                          <DropdownMenuItem>Mark as Fixed</DropdownMenuItem>
                          <DropdownMenuItem>Track Progress</DropdownMenuItem>
                        </DropdownMenuContent>
                      </DropdownMenu>
                    </td>
                  </tr>
                ))
              ) : (
                <tr>
                  <td colSpan={6} className="px-4 py-8 text-center text-muted-foreground">
                    No vulnerabilities found matching your filters.
                  </td>
                </tr>
              )}
            </tbody>
          </table>
        </div>
      </div>
    </div>
  );
}
